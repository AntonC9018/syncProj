<?xml version="1.0"?>
<doc>
    <assembly>
        <name>syncproj</name>
    </assembly>
    <members>
        <member name="T:CsScript">
            <summary>
            class for executing c# script.
            </summary>
        </member>
        <member name="M:CsScript.RunScript(System.String,System.Boolean,System.String@,System.String[])">
            <summary>
            Compiles .cs script into dll/pdb, loads as assembly, and executes Main function.
            Temporary dll/pdb gets deleted. If .cs throws exception - it will be converted to
            error information, including .cs filename and source code line information.
            </summary>
            <param name="_path">Path to script which to execute</param>
            <param name="bCompileNextToCs">
                When this parameter is set to true, produced assembly will be kept next to C# script path.
                This also means that StackTrace will be able to display correct source code path and code line, unlike when loaded into ram
                false - if you don't care about source code position</param>
            <param name="errors">Errors if any</param>
            <param name="args">Main argument parameters</param>
            <returns>true if execution was successful.</returns>
        </member>
        <member name="T:FunctionNameAttribute">
            <summary>
            Custom class for mapping enumeration values to premake configuration tag.
            </summary>
        </member>
        <member name="F:IncludeType.ClInclude">
            <summary>
            Header file (.h)
            </summary>
        </member>
        <member name="F:IncludeType.CustomBuild">
            <summary>
            Any custom file with custom build step
            </summary>
        </member>
        <member name="F:IncludeType.ClCompile">
            <summary>
            Source codes (.cpp) files
            </summary>
        </member>
        <member name="F:IncludeType.None">
            <summary>
            .def / .bat
            </summary>
        </member>
        <member name="F:IncludeType.Text">
            <summary>
            .txt files.
            </summary>
        </member>
        <member name="F:IncludeType.ResourceCompile">
            <summary>
            .rc / resource files.
            </summary>
        </member>
        <member name="F:IncludeType.Image">
            <summary>
            .ico files.
            </summary>
        </member>
        <member name="F:IncludeType.Invalid">
            <summary>
            Intentionally not valid value, so can be replaced with correct one. (Visual studio does not supports one)
            </summary>
        </member>
        <member name="T:FileConfigurationInfo">
            <summary>
            Configuration class which configures project as well as individual file entries.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PreprocessorDefinitions">
            <summary>
            Defines, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalIncludeDirectories">
            <summary>
            Additional Include Directories, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalDependencies">
            <summary>
            obj / lib files, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalLibraryDirectories">
            <summary>
            Additional directory from where to search obj / lib files, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ObjectFileName">
            <summary>
            Output filename
            </summary>
        </member>
        <member name="F:FileInfo.customBuildTool">
            <summary>
            null if not in use, non-null if custom build tool is in use.
            </summary>
        </member>
        <member name="F:CustomBuildToolProperties.Command">
            <summary>
            Visual studio: Command line
            </summary>
        </member>
        <member name="F:CustomBuildToolProperties.Message">
            <summary>
            Visual studio: description
            </summary>
        </member>
        <member name="F:CustomBuildToolProperties.Outputs">
            <summary>
            Visual studio: outputs
            </summary>
        </member>
        <member name="F:CustomBuildToolProperties.AdditionalInputs">
            <summary>
            Visual studio: additional dependencies
            </summary>
        </member>
        <member name="F:EConfigurationType.Application">
            <summary>
            .exe
            </summary>
        </member>
        <member name="F:EConfigurationType.DynamicLibrary">
            <summary>
            .dll
            </summary>
        </member>
        <member name="F:ECharacterSet.Unicode">
            <summary>
            Unicode
            </summary>
        </member>
        <member name="F:ECharacterSet.MultiByte">
            <summary>
            Ansi
            </summary>
        </member>
        <member name="F:EWholeProgramOptimization.NoWholeProgramOptimization">
            <summary>
            Visual studio default.
            </summary>
        </member>
        <member name="F:EOptimization.MinSpace">
            <summary>
            Minimize Size
            </summary>
        </member>
        <member name="F:EOptimization.MaxSpeed">
            <summary>
            Maximize Speed
            </summary>
        </member>
        <member name="F:EOptimization.Full">
            <summary>
            Full Optimization
            </summary>
        </member>
        <member name="F:Configuration.PlatformToolset">
            <summary>
            For example:
                'v140' - for Visual Studio 2015.
                'v120' - for Visual Studio 2013.
            </summary>
        </member>
        <member name="F:Configuration.OutDir">
            <summary>
            Output Directory. 
                Visual studio default:  $(SolutionDir)$(Configuration)\
                premake default:        bin\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="F:Configuration.IntDir">
            <summary>
            Intermediate Directory.
                Visual studio default:  $(Configuration)\
                premake default:        obj\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="F:Configuration.TargetName">
            <summary>
            Target Name.
            Visual studio default: $(ProjectName)
            </summary>
        </member>
        <member name="F:Configuration.TargetExt">
            <summary>
            Target Extension (.exe, .dll, ...)
            </summary>
        </member>
        <member name="F:Configuration.SubSystem">
            <summary>
            Typically Windows or Console.
            </summary>
        </member>
        <member name="F:Configuration.GenerateDebugInformation">
            <summary>
            Visual studio defaults: OptimizeForDebugging for release, OptimizeForFasterLinking for debug.
            </summary>
        </member>
        <member name="F:Project.solution">
            <summary>
            Solution where project is included from. null if project loaded as standalone.
            </summary>
        </member>
        <member name="F:Project.bIsFolder">
            <summary>
            true if it's folder (in solution), false if it's project. (default)
            </summary>
        </member>
        <member name="P:Project.ProjectHostGuid">
            <summary>
            Made as a property so can be set over reflection.
            </summary>
        </member>
        <member name="F:Project.RelativePath">
            <summary>
            Sub-folder and filename of project to save. language defines project file extension
            </summary>
        </member>
        <member name="M:Project.getRelativePath">
            <summary>
            gets relative path based on programming language
            </summary>
            <returns></returns>
        </member>
        <member name="F:Project.slnConfigurations">
            <summary>
            Same amount of configurations as in solution, this however lists project configurations, which correspond to solution configuration
            using same index.
            </summary>
        </member>
        <member name="F:Project.configurations">
            <summary>
            List of supported configuration|platform permutations, like "Debug|Win32", "Debug|x64" and so on.
            </summary>
        </member>
        <member name="M:Project.getConfigurationNames">
            <summary>
            Gets list of supported configurations like 'Debug' / 'Release'
            </summary>
        </member>
        <member name="M:Project.getPlatforms">
            <summary>
            Gets list of supported platforms like 'Win32' / 'x64'
            </summary>
        </member>
        <member name="F:Project.slnBuildProject">
            <summary>
            true or false whether to build project or not.
            </summary>
        </member>
        <member name="F:Project.slnDeployProject">
            <summary>
            true to deploy project, false - not, null - invalid. List is null if not used at all.
            </summary>
        </member>
        <member name="F:Project.ProjectGuid">
            <summary>
            Project guid, for example "{65787061-7400-0000-0000-000000000000}"
            </summary>
        </member>
        <member name="F:Project.projectConfig">
            <summary>
            per configuration list
            </summary>
        </member>
        <member name="P:Project.ProjectDependencies">
            <summary>
            Project dependent guids. Set to null if not used.
            </summary>
        </member>
        <member name="F:Project.files">
            <summary>
            This array includes all items from ItemGroup, independently whether it's include file or file to compile, because
            visual studio is ordering them alphabetically - we keep same array to be able to sort files.
            </summary>
        </member>
        <member name="M:Project.getConfiguration(System.Xml.Linq.XElement)">
            <summary>
            Extracts configuration name in readable form.
            Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" => "Debug|x64"
            </summary>
        </member>
        <member name="M:Project.ExtractCompileOptions(System.Xml.Linq.XElement,FileInfo)">
            <summary>
            Extracts compilation options for single cpp/cs file.
            </summary>
            <param name="clCompile">xml node from where to get</param>
            <param name="file2compile">compiler options to fill out</param>
        </member>
        <member name="M:Project.LoadProject(Solution,System.String,Project)">
            <summary>
            Loads project. If project exists in solution, it's loaded in same instance.
            </summary>
            <param name="solution">Solution if any exists, null if not available.</param>
        </member>
        <member name="M:Project.DumpConfiguration(FileConfigurationInfo,System.String,Configuration)">
            <summary>
            Dumps file or project specific configuration.
            </summary>
            <param name="conf">Configuration to dump</param>
            <param name="confName">Configuration name, null if project wise</param>
            <param name="projectConf">Project configuration, null if conf is file specific configuration</param>
        </member>
        <member name="M:Project.SaveProject">
            <summary>
            Saves project if necessary.
            </summary>
        </member>
        <member name="T:Solution">
            <summary>
            .sln loaded into class.
            </summary>
        </member>
        <member name="F:Solution.configurations">
            <summary>
            List of configuration list, in form "{Configuration}|{Platform}", for example "Release|Win32".
            To extract individual platforms / configuration list, use following functions.
            </summary>
        </member>
        <member name="M:Solution.LoadSolution(System.String)">
            <summary>
            Loads visual studio .sln solution
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
        </member>
        <member name="M:Solution.SaveSolution">
            <summary>
            Saves solution into .sln file. Where to save is defined by path.
            </summary>
        </member>
        <member name="T:SolutionProjectBuilder">
            <summary>
            Helper class for generating solution or projects.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_scriptRelativeDir">
            <summary>
            Relative directory from solution. Set by RunScript.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.bEverythingIsOk">
            <summary>
            Just an indicator that we did not have any exception.
            </summary>
        </member>
        <member name="T:SolutionProjectBuilder.Destructor">
            <summary>
            Execute once for each invocation of script. Not executed if multiple scripts are included.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.solution(System.String)">
            <summary>
            Creates new solution.
            </summary>
            <param name="name">Solution name</param>
        </member>
        <member name="M:SolutionProjectBuilder.platforms(System.String[])">
            <summary>
            Specify platform list to be used for your solution or project.
                For example: platforms("x32", "x64");
            </summary>
            <param name="platformList">List of platforms to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.configurations(System.String[])">
            <summary>
            Specify which configurations to support. Typically "Debug" and "Release".
            </summary>
            <param name="configurationList">Configuration list to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.GenerateGuid(System.String)">
            <summary>
            Generates Guid based on String. Key assumption for this algorithm is that name is unique (across where it it's being used)
            and if name byte length is less than 16 - it will be fetched directly into guid, if over 16 bytes - then we compute sha-1
            hash from string and then pass it to guid.
            </summary>
            <param name="name">Unique name which is unique across where this guid will be used.</param>
            <returns>For example "{706C7567-696E-7300-0000-000000000000}" for "plugins"</returns>
        </member>
        <member name="M:SolutionProjectBuilder.externalproject(System.String)">
            <summary>
            Add to solution reference to external project
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.project(System.String)">
            <summary>
            Adds new project to solution
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.location(System.String)">
            <summary>
            The location function sets the destination directory for a generated solution or project file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:SolutionProjectBuilder.uuid(System.String)">
            <summary>
            Specifies project uuid.
            </summary>
            <param name="uuid"></param>
        </member>
        <member name="M:SolutionProjectBuilder.language(System.String)">
            <summary>
            Sets project programming language (reflects to used project extension)
            </summary>
            <param name="lang">C++ or C#</param>
        </member>
        <member name="M:SolutionProjectBuilder.dependson(System.String)">
            <summary>
            Specify one or more non-linking project build order dependencies.
            </summary>
            <param name="projectName">project name on which your currently selected project depends on</param>
        </member>
        <member name="M:SolutionProjectBuilder.group(System.String)">
            <summary>
            Sets current "directory" where project should be placed.
            </summary>
            <param name="groupPath"></param>
        </member>
        <member name="M:SolutionProjectBuilder.invokeScript(System.String)">
            <summary>
            Invokes C# Script by source code path. If any error, exception will be thrown.
            </summary>
            <param name="path">c# script path</param>
        </member>
        <member name="F:SolutionProjectBuilder.selectedFileConfigurations">
            <summary>
            Selected configurations (Either project global or file specific) selected by filter.
            selectedFileConfigurations is file specific, selectedConfigurations is project wide.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getSelectedConfigurations(System.Boolean)">
            <summary>
            Gets currently selected configurations by filter.
            </summary>
            <param name="bForceNonFileSpecific">true to force project specific configuration set.</param>
        </member>
        <member name="M:SolutionProjectBuilder.filter(System.String[])">
            <summary>
            Selects to which configurations to apply subsequent function calls (like "kind", "symbols", "files"
            and so on...)
            </summary>
            <param name="filters">
                Either configuration name, for example "Debug" / "Release" or
                by platform name, for example: "platforms:Win32", "platforms:x64"
                or by file name, for example: "files:my.cpp"
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.kind(System.String)">
            <summary>
            Specifies application type, one of following: 
            </summary>
            <param name="_kind">
            WindowedApp, Application    - Window application<para />
            DynamicLibrary, SharedLib   - .dll<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.toolset(System.String)">
            <summary>
            Selects the compiler, linker, etc. which are used to build a project or configuration.
            </summary>
            <param name="toolset">
            For example:<para />
                'v140' - for Visual Studio 2015.<para />
                'v120' - for Visual Studio 2013.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.characterset(System.String)">
            <summary>
            Selects character set.
            </summary>
            <param name="charset">One of following: "Unicode", "Multibyte", "MBCS"</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetdir(System.String)">
            <summary>
            Specifies output directory.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.objdir(System.String)">
            <summary>
            Specifies intermediate Directory.
            </summary>
            <param name="directory">For example "$(Configuration)\" or "obj\$(Platform)\$(Configuration)\"</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetname(System.String)">
            <summary>
            Specifies target name. (Filename without extension)
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.targetextension(System.String)">
            <summary>
            Specifies target file extension, including comma separator.
            </summary>
            <param name="extension">For example ".dll", ".exe"</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchheader(System.String)">
            <summary>
            Specifies the #include form of the precompiled header file name.
            </summary>
            <param name="file">header file</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchsource(System.String)">
            <summary>
            Specifies the C/C++ source code file which controls the compilation of the header.
            </summary>
            <param name="file">precompiled source code which needs to be compiled</param>
        </member>
        <member name="M:SolutionProjectBuilder.symbols(System.String)">
            <summary>
            Specified whether debug symbols are enabled or not.
            </summary>
            <param name="value">
            "on" - debug symbols are enabled<para />
            "off" - debug symbols are disabled<para />
            "fastlink" - debug symbols are enabled + faster linking enabled.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.includedirs(System.String[])">
            <summary>
            Specifies additional include directories.
            </summary>
            <param name="dirs">List of additional include directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.defines(System.String[])">
            <summary>
            Specifies additional defines.
            </summary>
            <param name="defines">defines, like for example "DEBUG", etc...</param>
        </member>
        <member name="M:SolutionProjectBuilder.files(System.String[])">
            <summary>
            Adds one or more file into project.
            </summary>
            <param name="files">Files to be added</param>
        </member>
        <member name="M:SolutionProjectBuilder.flags(System.String[])">
            <summary>
            Enables certain flags for specific configurations.
            </summary>
            <param name="flags">
            "LinkTimeOptimization" - Enable link-time (i.e. whole program) optimizations.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.ConsolePrintException(System.Exception,System.String[])">
            <summary>
            Prints more details about given exception. In visual studio format for errors.
            </summary>
            <param name="ex">Exception occurred.</param>
        </member>
        <member name="T:SolutionOrProject">
            <summary>
            Let's make system flexible enough that we can load projects and solutions independently of file format.
            </summary>
        </member>
        <member name="M:SolutionOrProject.ConfigationSpecificValue(Project,System.Collections.IList,System.String,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Func{System.String,System.String})">
            <summary>
            Walks through list of items, locates value using fieldName, identifies how many configuration lines we will need
            and inserts lines into lines2dump.
            </summary>
            <param name="proj">Project which hosts configuration list.</param>
            <param name="list">List to get values from</param>
            <param name="fieldName">Field name to scan </param>
            <param name="lines2dump">Lines which shall be created / updated.</param>
            <param name="valueToLine">value to config line translator function</param>
        </member>
        <member name="M:SolutionOrProject.UpdateProjectScript(UpdateInfo,System.String,System.Object,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Builds solution or project .lua/.cs scripts
            </summary>
            <param name="path">Full path from where project was loaded.</param>
            <param name="solutionOrProject">Solution or project</param>
            <param name="bProcessProjects">true to process sub-project, false not</param>
            <param name="format">lua or cs</param>
            <param name="outFile">Output filename without extension</param>
        </member>
        <member name="M:SolutionOrProject.UpdateConfigurationEntries(Project,System.Collections.Generic.IEnumerable{FileConfigurationInfo},Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            
            </summary>
            <param name="proj"></param>
            <param name="config">Either project global configuration entries (Project.projectConfig) or file specified entries (FileInfo.fileConfig)</param>
            <param name="fileName">name of file of which configuration is being parsed.</param>
        </member>
        <member name="M:SolutionOrProject.WriteLinesToDump(System.Text.StringBuilder,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Boolean@,System.String)">
            <summary>
            Writes lines to dump into built string.
            </summary>
        </member>
        <member name="T:Exception2">
            <summary>
            Same as Exception, only we save call stack in here (to be able to report error line later on).
            </summary>
        </member>
        <member name="M:Path2.makeRelative(System.String,System.String)">
            <summary>
            Rebases file with path fromPath to folder with baseDir.
            </summary>
            <param name="fromPath">Full file path (absolute)</param>
            <param name="baseDir">Full base directory path (absolute)</param>
            <returns>Relative path to file in respect of baseDir</returns>
        </member>
    </members>
</doc>
