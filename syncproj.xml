<?xml version="1.0"?>
<doc>
    <assembly>
        <name>syncproj</name>
    </assembly>
    <members>
        <member name="T:CsScript">
            <summary>
            class for executing c# script.
            </summary>
        </member>
        <member name="M:CsScript.RunScript(System.String,System.Boolean,System.Boolean,System.String@,System.String[])">
            <summary>
            Compiles .cs script into dll/pdb, loads as assembly, and executes Main function.
            Temporary dll/pdb gets deleted. If .cs throws exception - it will be converted to
            error information, including .cs filename and source code line information.
            </summary>
            <param name="_path">Path to script which to execute</param>
            <param name="bCompileNextToCs">
                When this parameter is set to true, produced assembly will be kept next to C# script path.
                This also means that StackTrace will be able to display correct source code path and code line, unlike when loaded into ram
                false - if you don't care about source code position</param>
            <param name="bAllowThrow">true if allow to throw exceptions</param>
            <param name="errors">Errors if any</param>
            <param name="args">Main argument parameters</param>
            <returns>true if execution was successful.</returns>
        </member>
        <member name="T:Project">
            <summary>
            Represents Visual studio project .xml model
            </summary>
        </member>
        <member name="F:Project.solution">
            <summary>
            Solution where project is included from. null if project loaded as standalone.
            </summary>
        </member>
        <member name="F:Project.bIsFolder">
            <summary>
            true if it's folder (in solution), false if it's project. (default)
            </summary>
        </member>
        <member name="F:Project.bIsPackagingProject">
            <summary>
            true if it's Android packaging project
            </summary>
        </member>
        <member name="F:Project.bDefinedAsExternal">
            <summary>
            Don't generate project if defined as externalproject
            </summary>
        </member>
        <member name="P:Project.ProjectHostGuid">
            <summary>
            Made as a property so can be set over reflection.
            </summary>
        </member>
        <member name="F:Project.ToolsVersion">
            <summary>
            "4.0" for vs2010/vs2012, "12.0" for vs2013, "14.0" for vs2015
            </summary>
        </member>
        <member name="M:Project.setOsBase(System.String)">
            <summary>
            Sets os base, returns false if not supported.
            </summary>
        </member>
        <member name="F:Project.WindowsTargetPlatformVersion">
            <summary>
            Target Platform Version, e.g. "8.1" or "10.0.14393.0"
            </summary>
        </member>
        <member name="F:Project.RelativePath">
            <summary>
            Sub-folder and filename of project to save. language defines project file extension
            </summary>
        </member>
        <member name="M:Project.getRelativePath">
            <summary>
            gets relative path based on programming language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Project.getProjectFolder">
            <summary>
            Gets folder where project will be saved in.
            </summary>
        </member>
        <member name="F:Project.slnConfigurations">
            <summary>
            Same amount of configurations as in solution, this however lists project configurations, which correspond to solution configuration
            using same index.
            </summary>
        </member>
        <member name="F:Project.configurations">
            <summary>
            List of supported configuration|platform permutations, like "Debug|Win32", "Debug|x64" and so on.
            </summary>
        </member>
        <member name="M:Project.getConfigurationNames">
            <summary>
            Gets list of supported configurations like 'Debug' / 'Release'
            </summary>
        </member>
        <member name="M:Project.getPlatforms">
            <summary>
            Gets list of supported platforms like 'Win32' / 'x64'
            </summary>
        </member>
        <member name="F:Project.slnBuildProject">
            <summary>
            true or false whether to build project or not.
            </summary>
        </member>
        <member name="F:Project.slnDeployProject">
            <summary>
            true to deploy project, false - not, null - invalid. List is null if not used at all.
            </summary>
        </member>
        <member name="F:Project.ProjectGuid">
            <summary>
            Project guid, for example "{65787061-7400-0000-0000-000000000000}"
            </summary>
        </member>
        <member name="F:Project.projectConfig">
            <summary>
            per configuration list
            </summary>
        </member>
        <member name="P:Project.ProjectDependencies">
            <summary>
            Project dependent guids. Set to null if not used.
            </summary>
        </member>
        <member name="F:Project.files">
            <summary>
            This array includes all items from ItemGroup, independently whether it's include file or file to compile, because
            visual studio is ordering them alphabetically - we keep same array to be able to sort files.
            </summary>
        </member>
        <member name="M:Project.getConfiguration(System.Xml.Linq.XElement)">
            <summary>
            Extracts configuration name in readable form.
            Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" => "Debug|x64"
            </summary>
        </member>
        <member name="M:Project.ExtractCompileOptions(System.Xml.Linq.XElement,FileInfo,System.String)">
            <summary>
            Extracts compilation options for single cpp/cs file.
            </summary>
            <param name="clCompile">xml node from where to get</param>
            <param name="file2compile">compiler options to fill out</param>
            <param name="subField">Into which field to enter if non null</param>
        </member>
        <member name="M:Project.LoadProject(Solution,System.String,Project)">
            <summary>
            Loads project. If project exists in solution, it's loaded in same instance.
            </summary>
            <param name="solution">Solution if any exists, null if not available.</param>
        </member>
        <member name="M:Project.DumpConfiguration(FileConfigurationInfo,System.String,Configuration)">
            <summary>
            Dumps file or project specific configuration.
            </summary>
            <param name="conf">Configuration to dump</param>
            <param name="confName">Configuration name, null if project wise</param>
            <param name="projectConf">Project configuration, null if conf is file specific configuration</param>
        </member>
        <member name="M:Project.getSortedConfigurations(System.Collections.Generic.List{System.String},System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Resorts configuration list in some particular order.
            </summary>
            <param name="configurations">Configuration to sort</param>
            <param name="bX3264hasPriority">x86 / x64 platforms have priority.</param>
            <param name="b64HasPriority">64 bit configurations have priority. null if not use this sort criteria.</param>
            <param name="bCompareConfigNameFirst">true if compare config name first</param>
            <returns></returns>
        </member>
        <member name="M:Project.XmlEscape(System.String)">
            <summary>
            Escapes xml special characters. http://weblogs.sqlteam.com/mladenp/archive/2008/10/21/Different-ways-how-to-escape-an-XML-string-in-C.aspx
            </summary>
        </member>
        <member name="M:Project.SaveProject">
            <summary>
            Saves project if necessary.
            </summary>
        </member>
        <member name="M:Project.UpdateFile(System.String,System.String,System.Boolean)">
            <summary>
            Save file contents if file were updated.
            </summary>
            <param name="path">Path to save</param>
            <param name="force">true if force to save file</param>
            <returns>true if file was updated.</returns>
        </member>
        <member name="T:FunctionNameAttribute">
            <summary>
            Custom class for mapping enumeration values to premake configuration tag.
            </summary>
        </member>
        <member name="F:FunctionNameAttribute.tag">
            <summary>
            function name itself.
            </summary>
        </member>
        <member name="M:FunctionNameAttribute.#ctor(System.String)">
            <summary>
            function name attribute
            </summary>
        </member>
        <member name="T:EPrecompiledHeaderUse">
            <summary>
            Specifies whether or not to use precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.Create">
            <summary>
            Create precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.Use">
            <summary>
            Use precompiled headers
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.NotUsing">
            <summary>
            Default value (not initialized)
            </summary>
        </member>
        <member name="F:EPrecompiledHeaderUse.ProjectDefault">
            <summary>
            Not available in project file, but this is something we indicate that we haven't set value for precompiled headers.
            </summary>
        </member>
        <member name="T:EWarningLevel">
            <summary>
            Specifies the level of warning to be generated by the compiler.
            </summary>
        </member>
        <member name="F:EWarningLevel.TurnOffAllWarnings">
            <summary>
            Level 0 disables all warnings.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level1">
            <summary>
            Level 1 displays severe warnings. Level 1 is the default setting.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level2">
            <summary>
            Level 2 displays all level 1 warnings and warnings that are less severe than level 1.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level3">
            <summary>
            Level 3 displays all level 2 warnings and all other warnings that are recommended for production purposes.
            </summary>
        </member>
        <member name="F:EWarningLevel.Level4">
            <summary>
            Level 4 displays all level 3 warnings and informational warnings. We recommend that you use this option only to provide lint-like warnings. 
            However, for a new project, it may be best to use /W4 in all compilations; this will ensure the fewest possible hard-to-find code defects.
            </summary>
        </member>
        <member name="F:EWarningLevel.EnableAllWarnings">
            <summary>
            Displays all /W4 warnings and any other warnings that are not included in /W4—for example, warnings that are off by default.
            </summary>
        </member>
        <member name="T:IncludeType">
            <summary>
            Defines what needs to be done with given item. Not all project types support all enumerations - for example
            packaging projects / C# projects does not support CustomBuild.
            </summary>
        </member>
        <member name="F:IncludeType.ClInclude">
            <summary>
            Header file (.h)
            </summary>
        </member>
        <member name="F:IncludeType.CustomBuild">
            <summary>
            Any custom file with custom build step
            </summary>
        </member>
        <member name="F:IncludeType.ClCompile">
            <summary>
            Source codes (.cpp) files
            </summary>
        </member>
        <member name="F:IncludeType.None">
            <summary>
            .def / .bat
            </summary>
        </member>
        <member name="F:IncludeType.Text">
            <summary>
            .txt files.
            </summary>
        </member>
        <member name="F:IncludeType.ResourceCompile">
            <summary>
            .rc / resource files.
            </summary>
        </member>
        <member name="F:IncludeType.Image">
            <summary>
            .ico files.
            </summary>
        </member>
        <member name="F:IncludeType.ProjectReference">
            <summary>
            For Android package project: Reference to another project, which needs to be included into package.
            </summary>
        </member>
        <member name="F:IncludeType.Invalid">
            <summary>
            Intentionally not valid value, so can be replaced with correct one. (Visual studio does not supports one)
            </summary>
        </member>
        <member name="T:EDebugInformationFormat">
            <summary>
            Defines debug information format.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.EditAndContinue">
            <summary>
            Applicable for windows projects only
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.None">
            <summary>
            Applicable for windows and android projects
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.OldStyle">
            <summary>
            Applicable for windows projects only
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.ProgramDatabase">
            <summary>
            Applicable for windows projects only
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.LineNumber">
            <summary>
            Applicable for android projects only.
            </summary>
        </member>
        <member name="F:EDebugInformationFormat.FullDebug">
            <summary>
            Applicable for android projects only.
            </summary>
        </member>
        <member name="T:FileConfigurationInfo">
            <summary>
            Configuration class which configures project as well as individual file entries.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.confName">
            <summary>
            For debugging purposes - specifies configuration name (Debug|Win32) with which given configuration is accosiated with.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PrecompiledHeader">
            <summary>
            Precompile header - use or create.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PreprocessorDefinitions">
            <summary>
            Defines, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalIncludeDirectories">
            <summary>
            Additional Include Directories, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ShowIncludes">
            <summary>
            In windows projects only: Set to true if includes needs to be shown. Used for debug purposes, not loaded by script as configuration parameter.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalDependencies">
            <summary>
            obj / lib files, ';' separated list.
            On windows platform can include also libraries, on android 'LibraryDependencies' specifies library files.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.LibraryDependencies">
            <summary>
            Android specific: Additional libraries to link
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.AdditionalLibraryDirectories">
            <summary>
            Additional directory from where to search obj / lib files, ';' separated list.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ObjectFileName">
            <summary>
            Output filename (.obj file)
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.PrecompiledHeaderFile">
            <summary>
            Precompiled header file
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.Optimization">
            <summary>
            Optimization level
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.FunctionLevelLinking">
            <summary>
            Allows the compiler to package individual functions in the form of packaged functions (COMDATs).
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.IntrinsicFunctions">
            <summary>
            Replaces some function calls with intrinsic or otherwise special forms of the function that help your application run faster.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.EnableCOMDATFolding">
            <summary>
            Some sort of linker optimization flag: COMDAT folding
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.OptimizeReferences">
            <summary>
            Eliminates functions and data that are never referenced
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.DebugInformationFormat">
            <summary>
            Format of debug information
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.customBuildRule">
            <summary>
            Custom build step for includeType.CustomBuild specification.
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.ClCompile_AdditionalOptions">
            <summary>
            Additional compiler options
            </summary>
        </member>
        <member name="F:FileConfigurationInfo.Link_AdditionalOptions">
            <summary>
            Additional linker options
            </summary>
        </member>
        <member name="T:FileInfo">
            <summary>
            Information about that particular file.
            </summary>
        </member>
        <member name="F:FileInfo.includeType">
            <summary>
            Include type, same as specified in .vcxproj / .androidproj.
            </summary>
        </member>
        <member name="F:FileInfo.relativePath">
            <summary>
            Relative path to file (from project path perspective)
            </summary>
        </member>
        <member name="F:FileInfo.Project">
            <summary>
            Android specific: when includeType == ProjectReference - specifies referenced project guid. Includes guid brackets - '{'/'}'
            </summary>
        </member>
        <member name="F:FileInfo.fileConfig">
            <summary>
            Per configuration specific file configuration.
            </summary>
        </member>
        <member name="T:CustomBuildRule">
            <summary>
            Custom build tool properties.
            </summary>
        </member>
        <member name="F:CustomBuildRule.Command">
            <summary>
            Visual studio: Command line
            </summary>
        </member>
        <member name="F:CustomBuildRule.Message">
            <summary>
            Visual studio: description. Use empty string to supress message printing.
            </summary>
        </member>
        <member name="F:CustomBuildRule.Outputs">
            <summary>
            Visual studio: outputs
            </summary>
        </member>
        <member name="F:CustomBuildRule.AdditionalInputs">
            <summary>
            Visual studio: additional dependencies
            </summary>
        </member>
        <member name="M:CustomBuildRule.ToString">
            <summary>
            Gets class instance as one xml string.
            </summary>
        </member>
        <member name="M:CustomBuildRule.FromString(System.String)">
            <summary>
            Decodes class from string
            </summary>
            <param name="inS">xml string to deserialize</param>
            <returns>CustomBuildRule class instance</returns>
        </member>
        <member name="T:EConfigurationType">
            <summary>
            Project type
            </summary>
        </member>
        <member name="F:EConfigurationType.Application">
            <summary>
            .exe
            </summary>
        </member>
        <member name="F:EConfigurationType.DynamicLibrary">
            <summary>
            .dll
            </summary>
        </member>
        <member name="T:ECharacterSet">
            <summary>
            Character set - unicode MBCS.
            </summary>
        </member>
        <member name="F:ECharacterSet.Unicode">
            <summary>
            Unicode
            </summary>
        </member>
        <member name="F:ECharacterSet.MultiByte">
            <summary>
            Ansi
            </summary>
        </member>
        <member name="F:EWholeProgramOptimization.NoWholeProgramOptimization">
            <summary>
            Visual studio default.
            </summary>
        </member>
        <member name="T:ESubSystem">
            <summary>
            Binary image format / target
            </summary>
        </member>
        <member name="F:ESubSystem.NotSet">
            <summary>
            Not specified
            </summary>
        </member>
        <member name="F:ESubSystem.Windows">
            <summary>
            Windows application
            </summary>
        </member>
        <member name="F:ESubSystem.Console">
            <summary>
            Console application
            </summary>
        </member>
        <member name="T:EOptimization">
            <summary>
            How to optimize code ?
            </summary>
        </member>
        <member name="F:EOptimization.Disabled">
            <summary>
            No optimizations
            </summary>
        </member>
        <member name="F:EOptimization.MinSpace">
            <summary>
            Minimize Size
            </summary>
        </member>
        <member name="F:EOptimization.MaxSpeed">
            <summary>
            Maximize Speed
            </summary>
        </member>
        <member name="F:EOptimization.Full">
            <summary>
            Full Optimization
            </summary>
        </member>
        <member name="T:EGenerateDebugInformation">
            <summary>
            Generate debug information
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.OptimizeForDebugging">
            <summary>
            Optimize for debugging
            </summary>
        </member>
        <member name="F:EGenerateDebugInformation.OptimizeForFasterLinking">
            <summary>
            Use fast linking
            </summary>
        </member>
        <member name="T:ECompileAs">
            <summary>
            Compile As option.
            </summary>
        </member>
        <member name="F:ECompileAs.Default">
            <summary>
            Compile as 'Default'
            </summary>
        </member>
        <member name="F:ECompileAs.CompileAsCpp">
            <summary>
            Compile as C++ Code (-x c++)
            </summary>
        </member>
        <member name="F:ECompileAs.CompileAsC">
            <summary>
            Compile as C Code (-x c)
            </summary>
        </member>
        <member name="T:EUseOfStl">
            <summary>
            Use of STL library
            </summary>
        </member>
        <member name="F:EUseOfStl.system">
            <summary>
            Minimal C++ runtime library (system)
            </summary>
        </member>
        <member name="F:EUseOfStl.gabi_cpp_static">
            <summary>
            C++ runtime static library (gabi++_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.gabi_cpp_shared">
            <summary>
            C++ runtime shared library (gabi++_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.stlport_static">
            <summary>
            STLport runtime static library (stlport_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.stlport_shared">
            <summary>
            STLport runtime shared library (stlport_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.gnustl_static">
            <summary>
            GNU STL static library (gnustl_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.gnustl_shared">
            <summary>
            GNU STL shared library (gnustl_shared)
            </summary>
        </member>
        <member name="F:EUseOfStl.cpp_static">
            <summary>
            LLVM libc++ static library (c++_static)
            </summary>
        </member>
        <member name="F:EUseOfStl.cpp_shared">
            <summary>
            LLVM libc++ shared library (c++_shared)
            </summary>
        </member>
        <member name="T:Configuration">
            <summary>
            All values set by default are Visual Studio default.
            </summary>
        </member>
        <member name="F:Configuration.ConfigurationType">
            <summary>
            Project type
            </summary>
        </member>
        <member name="M:Configuration.ConfigurationTypeUpdated">
            <summary>
            Called when ConfigurationType has changed.
            </summary>
        </member>
        <member name="F:Configuration.AndroidAPILevel">
            <summary>
            Android api level, for example "android-22". If null - uses Visual studio default.
            
            </summary>
        </member>
        <member name="F:Configuration.UseOfStl">
            <summary>
            Use of STL
            </summary>
        </member>
        <member name="M:Configuration.UseOfStl_getSupportedValues">
            <summary>
            Get list of supported UseOfSTL values
            </summary>
        </member>
        <member name="M:Configuration.getAndroidAPILevelDefault(System.String)">
            <summary>
            Visual studio default depends on cpu architecture - android-19 is default for ARM, android-21 for ARM64.
            </summary>
            <param name="confName"></param>
            <returns>android api level default</returns>
        </member>
        <member name="F:Configuration.PlatformToolset">
            <summary>
            For example:
                null - default
                'Clang_3_8'     - Clang 3.8
                'v140'          - for Visual Studio 2015.
                'v120'          - for Visual Studio 2013.
            </summary>
        </member>
        <member name="M:Configuration.getPlatformToolsetDefault(Project)">
            <summary>
            Queries default value for PlatformToolset.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.UseOfMfc">
            <summary>
            Defines how MFC is linked in
            </summary>
        </member>
        <member name="F:Configuration.OutDir">
            <summary>
            Output Directory. 
                Visual studio default:  can be queried using getOutDirDefault()
                premake default:        bin\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="M:Configuration.getOutDirDefault(Project)">
            <summary>
            Gets default value for OutDir field.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.IntDir">
            <summary>
            Intermediate Directory.
                Visual studio default:  $(Configuration)\
                premake default:        obj\$(Platform)\$(Configuration)\
            </summary>
        </member>
        <member name="M:Configuration.getIntDirDefault(Project)">
            <summary>
            Gets intermediate directory default.
            </summary>
            <param name="p">project</param>
            <returns>Default value of IntDir</returns>
        </member>
        <member name="F:Configuration.TargetName">
            <summary>
            Target Name.
            Visual studio default: $(ProjectName)
            </summary>
        </member>
        <member name="M:Configuration.getTargetNameDefault(Project)">
            <summary>
            Gets default value for TargetName
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.TargetExt">
            <summary>
            Target Extension (.exe, .dll, ...).
            If set to default - must be null.
            </summary>
        </member>
        <member name="M:Configuration.getTargetExtDefault(Project)">
            <summary>
            Gets default value for target ext.
            </summary>
            <param name="p">Project against which to query</param>
            <returns>Default value</returns>
        </member>
        <member name="F:Configuration.SubSystem">
            <summary>
            Typically Windows or Console.
            </summary>
        </member>
        <member name="F:Configuration.GenerateDebugInformation">
            <summary>
            Visual studio defaults: OptimizeForDebugging for release, OptimizeForFasterLinking for debug.
            </summary>
        </member>
        <member name="F:Configuration.AndroidAppLibName">
            <summary>
            Android specific.
            </summary>
        </member>
        <member name="F:Configuration.CompileAs">
            <summary>
            Android specific.
            </summary>
        </member>
        <member name="T:EKeyword">
            <summary>
            Tags platform
            </summary>
        </member>
        <member name="F:EKeyword.None">
            <summary>
            For sub-folders for example (Also default value)
            </summary>
        </member>
        <member name="F:EKeyword.Package">
            <summary>
            Typically set for Android packaging project.
            </summary>
        </member>
        <member name="F:EKeyword.Win32Proj">
            <summary>
            Windows project (32 or 64 bit)
            </summary>
        </member>
        <member name="F:EKeyword.Android">
            <summary>
            Android project
            </summary>
        </member>
        <member name="F:EKeyword.MFCProj">
            <summary>
            Windows application with MFC support
            </summary>
        </member>
        <member name="T:EUseOfMfc">
            <summary>
            Defines how MFC is linked in
            </summary>
        </member>
        <member name="F:EUseOfMfc.None">
            <summary>
            Use Standard Windows Libraries (No MFC)
            </summary>
        </member>
        <member name="F:EUseOfMfc.Static">
            <summary>
            Use MFC in a Static Library
            </summary>
        </member>
        <member name="F:EUseOfMfc.Dynamic">
            <summary>
            Use MFC in a Shared DLL
            </summary>
        </member>
        <member name="T:Solution">
            <summary>
            .sln loaded into class.
            </summary>
        </member>
        <member name="F:Solution.path">
            <summary>
            File path from where solution was loaded.
            </summary>
        </member>
        <member name="F:Solution.visualStudioFormatTag">
            <summary>
            Visual studio version information used for generation, for example 2010, 2012, 2015 and so on...
            </summary>
        </member>
        <member name="F:Solution.VisualStudioVersion">
            <summary>
            null for old visual studio's
            </summary>
        </member>
        <member name="F:Solution.MinimumVisualStudioVersion">
            <summary>
            null for old visual studio's
            </summary>
        </member>
        <member name="F:Solution.projects">
            <summary>
            List of project included into solution.
            </summary>
        </member>
        <member name="F:Solution.configurations">
            <summary>
            List of configuration list, in form "{Configuration}|{Platform}", for example "Release|Win32".
            To extract individual platforms / configuration list, use following functions.
            </summary>
        </member>
        <member name="M:Solution.getPlatforms">
            <summary>
            Extracts platfroms supported by solution
            </summary>
        </member>
        <member name="M:Solution.getConfigurations">
            <summary>
            Extracts configuration names supported by solution
            </summary>
        </member>
        <member name="M:Solution.#ctor">
            <summary>
            Creates new solution.
            </summary>
        </member>
        <member name="M:Solution.LoadSolution(System.String)">
            <summary>
            Loads visual studio .sln solution
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
        </member>
        <member name="M:Solution.SaveSolution">
            <summary>
            Saves solution into .sln file. Where to save is defined by path.
            </summary>
        </member>
        <member name="T:SolutionProjectBuilder">
            <summary>
            Helper class for generating solution or projects.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_solution">
            <summary>
            Currently selected active solution on which all function below operates upon. null if not selected yet.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_project">
            <summary>
            Currently selected active project on which all function below operates upon. null if not selected yet.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_workPath">
            <summary>
            Path where we are building solution / project at. By default same as script is started from.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.m_scriptRelativeDir">
            <summary>
            Relative directory from solution. Set by RunScript.
            </summary>
        </member>
        <member name="F:SolutionProjectBuilder.bEverythingIsOk">
            <summary>
            Just an indicator that we did not have any exception.
            </summary>
        </member>
        <member name="T:SolutionProjectBuilder.Destructor">
            <summary>
            Execute once for each invocation of script. Not executed if multiple scripts are included.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.solution(System.String)">
            <summary>
            Creates new solution.
            </summary>
            <param name="name">Solution name</param>
        </member>
        <member name="M:SolutionProjectBuilder.vsver(System.Int32)">
            <summary>
            Specifies Visual studio version upon which given solution is targetted.
            </summary>
            <param name="vsVersionNumber"></param>
        </member>
        <member name="M:SolutionProjectBuilder.platforms(System.String[])">
            <summary>
            Specify platform list to be used for your solution or project.
                For example: platforms("x32", "x64");
            </summary>
            <param name="platformList">List of platforms to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.configurations(System.String[])">
            <summary>
            Specify which configurations to support. Typically "Debug" and "Release".
            </summary>
            <param name="configurationList">Configuration list to support</param>
        </member>
        <member name="M:SolutionProjectBuilder.GenerateGuid(System.String)">
            <summary>
            Generates Guid based on String. Key assumption for this algorithm is that name is unique (across where it it's being used)
            and if name byte length is less than 16 - it will be fetched directly into guid, if over 16 bytes - then we compute sha-1
            hash from string and then pass it to guid.
            </summary>
            <param name="name">Unique name which is unique across where this guid will be used.</param>
            <returns>For example "{706C7567-696E-7300-0000-000000000000}" for "plugins"</returns>
        </member>
        <member name="M:SolutionProjectBuilder.externalproject(System.String)">
            <summary>
            Add to solution reference to external project. Call with null parameter to flush currently active project (Either to solution
            or to disk).
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.project(System.String)">
            <summary>
            Adds new project to solution
            </summary>
            <param name="name">Project name</param>
        </member>
        <member name="M:SolutionProjectBuilder.osbase(System.String)">
            <summary>
            Specifies IDE / OS where project is targetted upon.
            This function also sets default toolset, so if you want to override default toolset, specify it manually after this function call.
            </summary>
            <param name="osBase">One of following: vs2010, vs2012, vs2015, android, package</param>
        </member>
        <member name="M:SolutionProjectBuilder.location(System.String)">
            <summary>
            The location function sets the destination directory for a generated solution or project file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:SolutionProjectBuilder.uuid(System.String)">
            <summary>
            Specifies project uuid - could be written in form of normal guid ("{5E40B384-095E-452A-839D-E0B62833256F}")
            - use this kind of syntax if you need to produce your project in backwards compatible manner - so existing
            solution can load your project.
            Could be also written in any string form, but you need to take care that string is unique enough accross where your
            project is used. For example project("test1"); uuid("test"); project("test1"); uuid("test"); will result in
            two identical project uuid's and Visual studio will try to resave your project with changed uuid.
            </summary>
            <param name="nameOrUuid">Project uuid or some unique name</param>
        </member>
        <member name="M:SolutionProjectBuilder.language(System.String)">
            <summary>
            Sets project programming language (reflects to used project extension)
            </summary>
            <param name="lang">C++ or C#</param>
        </member>
        <member name="M:SolutionProjectBuilder.dependson(System.String[])">
            <summary>
            Specify one or more non-linking project build order dependencies.
            </summary>
            <param name="dependencies">List of dependent project. Can include only project name. Can include first guid and then project path. (For android packaging project)</param>
        </member>
        <member name="M:SolutionProjectBuilder.group(System.String)">
            <summary>
            Sets current "directory" where project should be placed.
            </summary>
            <param name="groupPath"></param>
        </member>
        <member name="M:SolutionProjectBuilder.invokeScript(System.String)">
            <summary>
            Invokes C# Script by source code path. If any error, exception will be thrown.
            </summary>
            <param name="path">c# script path</param>
        </member>
        <member name="F:SolutionProjectBuilder.selectedFileConfigurations">
            <summary>
            Selected configurations (Either project global or file specific) selected by filter.
            selectedFileConfigurations is file specific, selectedConfigurations is project wide.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.getSelectedConfigurations(System.Boolean,System.Int32)">
            <summary>
            Gets currently selected configurations by filter.
            </summary>
            <param name="bForceNonFileSpecific">true to force project specific configuration set.</param>
            <param name="callerFrame">Tells how many call call frame behind is end-user code. (Non syncproj code). (Reflects to error reporting)</param>
        </member>
        <member name="M:SolutionProjectBuilder.getSelectedProjectConfigurations">
            <summary>
            Gets project configuration list, throw exception if cannot be found
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.filter(System.String[])">
            <summary>
            Selects to which configurations to apply subsequent function calls (like "kind", "symbols", "files"
            and so on...)
            </summary>
            <param name="filters">
                Either configuration name, for example "Debug" / "Release" or
                by platform name, for example: "platforms:Win32", "platforms:x64"
                or by file name, for example: "files:my.cpp"
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.kind(System.String)">
            <summary>
            Specifies application type, one of following: 
            </summary>
            <param name="_kind">
            WindowedApp, Application    - Window application<para />
            DynamicLibrary, SharedLib   - .dll<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.toolset(System.String,System.Int32)">
            <summary>
            Selects the compiler, linker, etc. which are used to build a project or configuration.
            </summary>
            <param name="toolset">
            For example:<para />
                'v140' - for Visual Studio 2015.<para />
                'v120' - for Visual Studio 2013.<para />
            </param>
            <param name="callerFrame">Tells how many call call frame behind is end-user code. (Non syncproj code). (Reflects to error reporting)</param>
        </member>
        <member name="M:SolutionProjectBuilder.androidapilevel(System.String)">
            <summary>
            Sets current android api level. Default is "android-19".
            </summary>
            <param name="apilevel">Android api level</param>
        </member>
        <member name="M:SolutionProjectBuilder.useofstl(System.String)">
            <summary>
            Sets specific STL library for Android platform.
            </summary>
            <param name="useofstl"></param>
        </member>
        <member name="M:SolutionProjectBuilder.characterset(System.String)">
            <summary>
            Selects character set.
            </summary>
            <param name="charset">One of following: "Unicode", "Multibyte", "MBCS"</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetdir(System.String)">
            <summary>
            Specifies output directory.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.objdir(System.String)">
            <summary>
            Specifies intermediate Directory.
            </summary>
            <param name="directory">For example "$(Configuration)\" or "obj\$(Platform)\$(Configuration)\"</param>
        </member>
        <member name="M:SolutionProjectBuilder.targetname(System.String)">
            <summary>
            Specifies target name. (Filename without extension)
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.targetextension(System.String)">
            <summary>
            Specifies target file extension, including comma separator.
            </summary>
            <param name="extension">For example ".dll", ".exe"</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchheader(System.String)">
            <summary>
            Specifies the #include form of the precompiled header file name.
            </summary>
            <param name="file">header file</param>
        </member>
        <member name="M:SolutionProjectBuilder.pchsource(System.String)">
            <summary>
            Specifies the C/C++ source code file which controls the compilation of the header.
            </summary>
            <param name="file">precompiled source code which needs to be compiled</param>
        </member>
        <member name="M:SolutionProjectBuilder.symbols(System.String)">
            <summary>
            Specified whether debug symbols are enabled or not.
            </summary>
            <param name="value">
            "on" - debug symbols are enabled<para />
            "off" - debug symbols are disabled<para />
            "fastlink" - debug symbols are enabled + faster linking enabled.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.includedirs(System.String[])">
            <summary>
            Specifies additional include directories.
            </summary>
            <param name="dirs">List of additional include directories.</param>
        </member>
        <member name="M:SolutionProjectBuilder.defines(System.String[])">
            <summary>
            Specifies additional defines.
            </summary>
            <param name="defines">defines, like for example "DEBUG", etc...</param>
        </member>
        <member name="M:SolutionProjectBuilder.matchFiles(System.String,System.String)">
            <summary>
            Matches files from folder _dir using glob file pattern.
            In glob file pattern matching * reflects to any file or folder name, ** refers to any path (including sub-folders).
            ? refers to any character.
            
            There exists also 3-rd party library for performing similar matching - 'Microsoft.Extensions.FileSystemGlobbing'
            but it was dragging a lot of dependencies, I've decided to survive without it.
            </summary>
            <returns>List of files matches your selection</returns>
        </member>
        <member name="M:SolutionProjectBuilder.files(System.String[])">
            <summary>
            Adds one or more file into project.
            </summary>
            <param name="filePatterns">File patterns to be added</param>
        </member>
        <member name="M:SolutionProjectBuilder.buildrule(CustomBuildRule)">
            <summary>
            Specifies custom build rule for specific file.
            </summary>
            <param name="cbt">Custom build rule.</param>
        </member>
        <member name="M:SolutionProjectBuilder.projectScript(System.String,System.String,System.String)">
            <summary>
            Configures project rebuild step.
            </summary>
            <param name="script2include">Script to include into project</param>
            <param name="script2compile">Script which shall be compiled once script2include is changed</param>
            <param name="pathToSyncProjExe">Path where syncProj.exe will reside</param>
        </member>
        <member name="M:SolutionProjectBuilder.flags(System.String[])">
            <summary>
            Enables certain flags for specific configurations.
            </summary>
            <param name="flags">
            "LinkTimeOptimization" - Enable link-time (i.e. whole program) optimizations.<para />
            </param>
        </member>
        <member name="M:SolutionProjectBuilder.systemversion(System.String)">
            <summary>
            Sets platform version.
            </summary>
            <param name="ver">Target Platform Version, e.g. "8.1" or "10.0.14393.0"</param>
        </member>
        <member name="M:SolutionProjectBuilder.links(System.String[])">
            <summary>
            Adds one or more obj or lib into project to link against.
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:SolutionProjectBuilder.libdirs(System.String[])">
            <summary>
            Adds one or more library directory from where to search .obj / .lib files.
            </summary>
            <param name="folders"></param>
        </member>
        <member name="M:SolutionProjectBuilder.optimize_symbols_recheck(FileConfigurationInfo)">
            <summary>
            optimize and symbols reflect to debug format chosen.
            </summary>
            <param name="fconf"></param>
        </member>
        <member name="M:SolutionProjectBuilder.optimize(System.String)">
            <summary>
            Specifies optimization level to be used.
            </summary>
            <param name="optLevel">Optimization level to enable - one of following: off, size, speed, on(or full)</param>
        </member>
        <member name="M:SolutionProjectBuilder.buildoptions(System.String[])">
            <summary>
            Passes arguments directly to the compiler command line without translation.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.linkoptions(System.String[])">
            <summary>
            Passes arguments directly to the linker command line without translation.
            </summary>
        </member>
        <member name="M:SolutionProjectBuilder.objectfilename(System.String)">
            <summary>
            Sets current object filename (output of compilation result).
            Windows: Can be file or directory name.
            Android: Typically: "$(IntDir)%(filename).o"
            </summary>
            <param name="objFilename"></param>
        </member>
        <member name="M:SolutionProjectBuilder.preprocessFile(System.String,System.Boolean,System.String)">
            <summary>
            Advanced feature - forces particular file to preprocess only file (to be compiled).
            This can be used for checking define expansion.
            </summary>
            <param name="file">File to preprocess</param>
            <param name="outExtension">Output file extension</param>
            <param name="bDoPreprocess">true if you want to preprocess file, false if compile normally, but include only preprocessed output</param>
        </member>
        <member name="M:SolutionProjectBuilder.showIncludes(System.String[])">
            <summary>
            Enables show includes only for specific file.
            </summary>
            <param name="fileList">files for which to enable showIncludes.</param>
        </member>
        <member name="M:SolutionProjectBuilder.ConsolePrintException(System.Exception,System.String[])">
            <summary>
            Prints more details about given exception. In visual studio format for errors.
            </summary>
            <param name="ex">Exception occurred.</param>
        </member>
        <member name="T:SolutionOrProject">
            <summary>
            Let's make system flexible enough that we can load projects and solutions independently of file format.
            </summary>
        </member>
        <member name="M:SolutionOrProject.ConfigationSpecificValue(Project,System.Collections.IList,System.String,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.String)">
            <summary>
            Walks through list of items, locates value using fieldName, identifies how many configuration lines we will need
            and inserts lines into lines2dump.
            </summary>
            <param name="proj">Project which hosts configuration list.</param>
            <param name="list">List to get values from</param>
            <param name="fieldName">Field name to scan </param>
            <param name="lines2dump">Lines which shall be created / updated.</param>
            <param name="valueToLine">value to config line translator function. Function can return null if no lines needs to be provided.</param>
            <param name="forceDefaultValue">If value cannot be configured in style - enabled/disable (one kind of flag only - enable) - specify here default value</param>
        </member>
        <member name="M:SolutionOrProject.UpdateProjectScript(UpdateInfo,System.String,System.Object,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Builds solution or project .lua/.cs scripts
            </summary>
            <param name="uinfo">Information about updates peformed (to print out summary)</param>
            <param name="path">Full path from where project was loaded.</param>
            <param name="solutionOrProject">Solution or project</param>
            <param name="bProcessProjects">true to process sub-project, false not</param>
            <param name="format">lua or cs</param>
            <param name="outFile">Output filename without extension</param>
            <param name="outPrefix">Output prefix (To add before project name)</param>
        </member>
        <member name="M:SolutionOrProject.UpdateConfigurationEntries(Project,System.Collections.Generic.IEnumerable{FileConfigurationInfo},Dictionary2{System.String,System.Collections.Generic.List{System.String}},IncludeType,System.String)">
            <param name="proj"></param>
            <param name="config">Either project global configuration entries (Project.projectConfig) or file specified entries (FileInfo.fileConfig)</param>
            <param name="fileName">name of file of which configuration is being parsed.</param>
            <param name="lines2dump">lines to dump</param>
            <param name="includeType">item type to include (Custom build step or compilable source code)</param>
        </member>
        <member name="M:SolutionOrProject.tabbedLine(System.String,System.String)">
            <summary>
            Adds heading (tab) before each line - s is multiline string.
            </summary>
        </member>
        <member name="M:SolutionOrProject.WriteLinesToDump(System.Text.StringBuilder,Dictionary2{System.String,System.Collections.Generic.List{System.String}},System.Boolean@,System.String)">
            <summary>
            Writes lines to dump into built string.
            </summary>
        </member>
        <member name="T:UsingSyncProj">
            <summary>
            use this class like this:
            
                using ( new UsingSyncProj(1) )
                {
                    files ...
                    filter ...
                    
                }
            </summary>
        </member>
        <member name="M:UsingSyncProj.#ctor(System.Int32)">
            <summary>
            Shifts all callstack frames by N frames.
            </summary>
        </member>
        <member name="M:UsingSyncProj.Dispose">
            <summary>
            Restores call stack frame back.
            </summary>
        </member>
        <member name="T:Exception2">
            <summary>
            Same as Exception, only we save call stack in here (to be able to report error line later on).
            </summary>
        </member>
        <member name="F:Exception2.shiftCallerFrame">
            <summary>
            Global variable for those cases when syncProj uses functions meant for end-users (like files, filter, etc...)
            To get excepting address correctly.
            </summary>
        </member>
        <member name="M:Exception2.#ctor(System.String,System.Int32)">
            <summary>
            Creates new exception with stack trace from where exception was thrown.
            </summary>
            <param name="_msg"></param>
            <param name="callerFrame">Frame count which called this function</param>
        </member>
        <member name="M:Exception2.getThrowLocation">
            <summary>
            Tries to determine from which script position exception was thrown. Returns empty line if cannot be detected.
            </summary>
            <returns>Throw source code line</returns>
        </member>
        <member name="P:Exception2.Message">
            <summary>
            Gets exception message
            </summary>
        </member>
        <member name="M:Path2.GetScriptPath(System.Int32)">
            <summary>
            Gets source code full path of script, executing given function.
            </summary>
            <param name="iFrame">number of frame in stack.</param>
            <returns>Source code path, null if cannot be determined</returns>
        </member>
        <member name="M:Path2.makeRelative(System.String,System.String)">
            <summary>
            Rebases file with path fromPath to folder with baseDir.
            </summary>
            <param name="fromPath">Full file path (absolute)</param>
            <param name="baseDir">Full base directory path (absolute)</param>
            <returns>Relative path to file in respect of baseDir</returns>
        </member>
    </members>
</doc>
